<section title="Introduction" anchor="introduction">
    <section title="Purpose" anchor="intro.purpose">
        <t>
            The "Instant Satisfaction by Obscure Unstable Protocol" (InstantSOUP) is an application-level protocol for local message exchange.
            The protocol was developed during a telematics project at Karlsruhe Institute of Technology (KIT) during the course of the winter semester 2011/2012.
            InstantSOUP is responsible for connecting the user to a lobby in his or her local area network.
            In this environment the user is able to interact with other participants and chat rooms.
            It provides basic chat functionality which is described thoroughly below in <xref target="intro.features"/>.
        </t>
        <t>
            The InstantSOUP protocol is divided into two major concepts, namely a lobby and a client-server architecture.
            The lobby allows the user to discover different users without explicitly joining a server.
            The client-server architecture, on the other hand, allows the user to host a server which ultimately offers
            different user-created channels on which other users can join and chat.
        </t>
    </section>
    <section title="Requirements" anchor="intro.requirements">
        <t>
            The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
            "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
            document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.
        </t>
        <t>
            An implementation is not compliant if it fails to satisfy one or more
            of the MUST or REQUIRED level requirements for the protocols it
            implements. An implementation that satisfies all the MUST or REQUIRED
            level and all the SHOULD level requirements for its protocols is said
            to be "unconditionally compliant"; one that satisfies all the MUST
            level requirements but not all the SHOULD level requirements for its
            protocols is said to be "conditionally compliant."
        </t>
    </section>
    <section title="Features" anchor="intro.features">
        <t>
            The protocol is able to:
        </t>
        <t>
            <list style="format (%d)">
                <t>
                    find other users
                </t>
                <t>
                    find other channels
                </t>
                <t>
                    send pieces of information about channels and users
                </t>
                <t>
                    create channels
                </t>
                <t>
                    close channels
                </t>
                <t>
                    let users join a channel
                </t>
                <t>
                    let users leave a channel
                </t>
                <t>
                    allow users to be in more than one channel
                </t>
                <t>
                    set a pseudonym for client and/or server
                </t>
                <t>
                    invite users to a private channel
                </t>
                <t>
                    receive invites from other users
                </t>
                <t>
                    send messages to a channel
                </t>
                <t>
                    receive messages from a channel
                </t>
                <t>
                    recognize if users or channels have timed out
                </t>
                <t>
                    work nearly without any informational data loss
                </t>
            </list>
        </t>
        <t>
            The protocol is extendable to:
        </t>
        <t>
            <list style="format (%d)">
                <t>
                    other message formats
                </t>
                <t>
                    other types of data exchange
                </t>
                <t>
                    additional server/client commands
                </t>
            </list>
        </t>
    </section>
    <section title="Terminology" anchor="intro.terminology">
        <t>
            This specification uses a number of terms to refer to the roles
            played by participants in, and objects of, InstantSOUP.
        </t>
        <t>
            <iref item="node"/>
            Node
            <list>
                <t>
                    A computer system connected to a communication network (MUST be a local area network).
                </t>
            </list>
        </t>
        <t>
            <iref item="user"/>
            User
            <list>
                <t>
                    A real person. He MAY trigger actions in the network which MAY trigger reactions.
                </t>
            </list>
        </t>
        <t>
            <iref item="peer"/>
            Peer
            <list>
                <t>
                    A piece of software which runs on a node. It MUST implement the InstantSOUP protocol as well
                    as it MUST have an unique identifier (MAY be an UUID as described in RFC 4122 or simply the
                    MAC address of the node).
                </t>
                <t>
                    It MAY have an interface for a user to interact with.
                </t>
                <t>
                    It MAY have a pseudonym.
                </t>
            </list>
        </t>
        <t>
            <iref item="client"/>
            Client
            <list>
                <t>
                    A peer which accepts services.
                </t>
                <t>
                    It SHOULD be able to let a user create, enter, leave and send messages to a channel.
                </t>
                <t>
                    It MAY be a member of multiple channels.
                </t>
            </list>
        </t>
        <t>
            <iref item="server"/>
            Server
            <list>
                <t>
                    A peer which offers services.
                </t>
                <t>
                    It MAY be the host for channels.
                </t>
            </list>
        </t>
        <t>
            <iref item="channel"/>
            Channel
            <list>
                <t>
                    A basic concept describing the interaction between clients. A channel MAY be created by
                    a user as a request to a server by a client. A channel MAY be private which indicates that only
                    specific clients can be a member of the channel.
                </t>
                <t>
                    If a channel has no connected users, the lifetime of the channel depends on the implementation
                    of the server.
                </t>
            </list>
        </t>
        <t>
            <iref item="pdu"/>
            Protocol Data Unit
            <list>
                <t>
                    "Information that is delivered as a unit among peer entities of a network and that may contain
                    control information, address information, or data."
                    <eref target="http://en.wikipedia.org/w/index.php?title=Protocol_data_unit&amp;oldid=458223646">
                    (Protocol data unit - Wikipedia, The Free Encyclopedia)</eref>
                </t>
            </list>
        </t>
    </section>
</section>
<section anchor="Security" title="Security Considerations">
    <t></t>
</section>